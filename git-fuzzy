#!/usr/bin/env node

var createExecHandler = function(stdoutHandler) {
    return function(error, stdout, stderr) {
        if (stderr) {
            console.error(stderr.trim());
            process.exit(1);
        } else if (error) {
            console.error("fatal: git-fuzzy exec error:");
            console.error(error);
            process.exit(1);
        } else {
            stdoutHandler(stdout.trim());
        }
    };
};

var exec  = require("child_process").exec,
    kexec = require("kexec"),
    path  = require("path"),
    fuzzy = require("fuzzy");

if (process.argv.length < 3) {
    console.error("usage: git fuzzy <command> [<args>]");
    console.error("git-fuzzy will assume the last argument should fuzzy-match a filename that appears in the output of \"git status\".");
    process.exit(1);
}

var git_args       = process.argv.slice(2, -1),
    last_arg = process.argv.slice(-1).toString();

//If a standalone Git command was specified, or if the last argument looks like a Git argument rather than a filename, just fall through to Git.
if (process.argv.length === 3 || last_arg.charAt(0) === "-") {

    exec("git " + process.argv.slice(2).join(" "),
        createExecHandler(function(stdout) {
            if (stdout) { console.log(stdout); }
        })
    );

//Otherwise, assume the last argument is a fuzzy filename.
} else {

    exec("git status --porcelain",
        createExecHandler(function(stdout) {

            var git_status_lines = stdout.trim().split(/\n/);

            if (git_status_lines.length === 0) {
                console.error("fatal: nothing to match against; git-fuzzy only works when the working directory isn't clean.");
                process.exit(1);
            }

            var haystack = []; //A list of strings to fuzzy match against

            for (var i = 0; i < git_status_lines.length; i++) {
                var line = git_status_lines[i].trim();
                line = line.substring(2); //Strip the leading status flag and separator
                var tokens = line.split(" -> "); //Split by arrow in case something got renamed, but wrap in an array in all cases
                haystack = haystack.concat(tokens);
            }

            var matches = fuzzy.filter(last_arg, haystack).map(function(el) { return el.string; });

            if (matches.length === 0) {
                console.error("fatal: no matches");
                process.exit(1);
            } else if (matches.length > 1) {
                console.error("fatal: more than one match; please be more specific");
                console.error("matches:");
                for (var j = 0; j < matches.length; j++) {
                    console.error("\t" + matches[j]);
                    process.exit(1);
                } else {
                    exec("git rev-parse --show-toplevel",
                            createExecHandler(function(git_root) {
                                var git_args = git_args.join(" "),
                                    match_paths = matches.map(function(match) {
                                    '"' + path.join(git_root, match) + '"';
                                }).join(" ");
                                kexec(["git", git_args, match_paths].join(" "));
                            }));
                }
            })
    );
}
